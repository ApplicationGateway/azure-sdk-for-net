// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.WindowsAzure.Management.ApplicationGateway;
using Microsoft.WindowsAzure.Management.ApplicationGateway.Models;

namespace Microsoft.WindowsAzure
{
    /// <summary>
    /// The Service Management API includes operations for managing your
    /// application gateways.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157182.aspx for
    /// more information)
    /// </summary>
    public static partial class L7GatewayOperationsExtensions
    {
        /// <summary>
        /// The Begin Create Application Gateway operation  creates Application
        /// Gateway with the specified  parameters.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.ApplicationGateway.IL7GatewayOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Begin CreateApplication
        /// Gateway request.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static GatewayOperationResponse BeginCreateApplicationGateway(this IL7GatewayOperations operations, CreateApplicationGatewayParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IL7GatewayOperations)s).BeginCreateApplicationGatewayAsync(parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Begin Create Application Gateway operation  creates Application
        /// Gateway with the specified  parameters.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.ApplicationGateway.IL7GatewayOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Begin CreateApplication
        /// Gateway request.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<GatewayOperationResponse> BeginCreateApplicationGatewayAsync(this IL7GatewayOperations operations, CreateApplicationGatewayParameters parameters)
        {
            return operations.BeginCreateApplicationGatewayAsync(parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Begin Delete Application Gateway operation  deletes Application
        /// Gateway with the specified  parameters.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.ApplicationGateway.IL7GatewayOperations.
        /// </param>
        /// <param name='gatewayName'>
        /// Required. The name of the gateway.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static GatewayOperationResponse BeginDeleteApplicationGateway(this IL7GatewayOperations operations, string gatewayName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IL7GatewayOperations)s).BeginDeleteApplicationGatewayAsync(gatewayName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Begin Delete Application Gateway operation  deletes Application
        /// Gateway with the specified  parameters.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.ApplicationGateway.IL7GatewayOperations.
        /// </param>
        /// <param name='gatewayName'>
        /// Required. The name of the gateway.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<GatewayOperationResponse> BeginDeleteApplicationGatewayAsync(this IL7GatewayOperations operations, string gatewayName)
        {
            return operations.BeginDeleteApplicationGatewayAsync(gatewayName, CancellationToken.None);
        }
        
        /// <summary>
        /// The Execute Application Gateway Operation executes specified
        /// operation on Application Gateway .  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.ApplicationGateway.IL7GatewayOperations.
        /// </param>
        /// <param name='gatewayName'>
        /// Required. Name of the gateway
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Begin Execute Operation
        /// request.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static GatewayOperationResponse BeginExecuteOperation(this IL7GatewayOperations operations, string gatewayName, ApplicationGatewayOperation parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IL7GatewayOperations)s).BeginExecuteOperationAsync(gatewayName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Execute Application Gateway Operation executes specified
        /// operation on Application Gateway .  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.ApplicationGateway.IL7GatewayOperations.
        /// </param>
        /// <param name='gatewayName'>
        /// Required. Name of the gateway
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Begin Execute Operation
        /// request.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<GatewayOperationResponse> BeginExecuteOperationAsync(this IL7GatewayOperations operations, string gatewayName, ApplicationGatewayOperation parameters)
        {
            return operations.BeginExecuteOperationAsync(gatewayName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Begin Set Application Gateway config operation  sets the
        /// specified config on the application gateway  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.ApplicationGateway.IL7GatewayOperations.
        /// </param>
        /// <param name='gatewayName'>
        /// Required. Gateway name
        /// </param>
        /// <param name='config'>
        /// Required. The application gateway configuration
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static GatewayOperationResponse BeginSetConfig(this IL7GatewayOperations operations, string gatewayName, ApplicationGatewaySetConfiguration config)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IL7GatewayOperations)s).BeginSetConfigAsync(gatewayName, config);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Begin Set Application Gateway config operation  sets the
        /// specified config on the application gateway  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.ApplicationGateway.IL7GatewayOperations.
        /// </param>
        /// <param name='gatewayName'>
        /// Required. Gateway name
        /// </param>
        /// <param name='config'>
        /// Required. The application gateway configuration
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<GatewayOperationResponse> BeginSetConfigAsync(this IL7GatewayOperations operations, string gatewayName, ApplicationGatewaySetConfiguration config)
        {
            return operations.BeginSetConfigAsync(gatewayName, config, CancellationToken.None);
        }
        
        /// <summary>
        /// The Begin Create Application Gateway operation  creates Application
        /// Gateway with the specified  parameters.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.ApplicationGateway.IL7GatewayOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to CreateApplication Gateway request.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static ApplicationGatewayOperationResponse Create(this IL7GatewayOperations operations, CreateApplicationGatewayParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IL7GatewayOperations)s).CreateAsync(parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Begin Create Application Gateway operation  creates Application
        /// Gateway with the specified  parameters.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.ApplicationGateway.IL7GatewayOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to CreateApplication Gateway request.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<ApplicationGatewayOperationResponse> CreateAsync(this IL7GatewayOperations operations, CreateApplicationGatewayParameters parameters)
        {
            return operations.CreateAsync(parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Delete Application Gateway operation  deletes Application
        /// Gateway with the specified  parameters.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.ApplicationGateway.IL7GatewayOperations.
        /// </param>
        /// <param name='gatewayName'>
        /// Required. The name of the gateway.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static ApplicationGatewayOperationResponse Delete(this IL7GatewayOperations operations, string gatewayName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IL7GatewayOperations)s).DeleteAsync(gatewayName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Delete Application Gateway operation  deletes Application
        /// Gateway with the specified  parameters.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.ApplicationGateway.IL7GatewayOperations.
        /// </param>
        /// <param name='gatewayName'>
        /// Required. The name of the gateway.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<ApplicationGatewayOperationResponse> DeleteAsync(this IL7GatewayOperations operations, string gatewayName)
        {
            return operations.DeleteAsync(gatewayName, CancellationToken.None);
        }
        
        /// <summary>
        /// The Execute Application Gateway Operation executes specofoed
        /// operation in the Application Gateway.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.ApplicationGateway.IL7GatewayOperations.
        /// </param>
        /// <param name='gatewayName'>
        /// Required. Name of the gateway
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to Execute Operation request.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static ApplicationGatewayOperationResponse ExecuteOperation(this IL7GatewayOperations operations, string gatewayName, ApplicationGatewayOperation parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IL7GatewayOperations)s).ExecuteOperationAsync(gatewayName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Execute Application Gateway Operation executes specofoed
        /// operation in the Application Gateway.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.ApplicationGateway.IL7GatewayOperations.
        /// </param>
        /// <param name='gatewayName'>
        /// Required. Name of the gateway
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to Execute Operation request.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<ApplicationGatewayOperationResponse> ExecuteOperationAsync(this IL7GatewayOperations operations, string gatewayName, ApplicationGatewayOperation parameters)
        {
            return operations.ExecuteOperationAsync(gatewayName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The List Application Gateway operation retrieves the application
        /// gateways provisioned for the given subscription.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157196.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.ApplicationGateway.IL7GatewayOperations.
        /// </param>
        /// <param name='gatewayName'>
        /// Required. The name of the gateway.
        /// </param>
        /// <returns>
        /// The response body contains details of the application gateway.
        /// </returns>
        public static ApplicationGatewayGetResponse Get(this IL7GatewayOperations operations, string gatewayName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IL7GatewayOperations)s).GetAsync(gatewayName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The List Application Gateway operation retrieves the application
        /// gateways provisioned for the given subscription.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157196.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.ApplicationGateway.IL7GatewayOperations.
        /// </param>
        /// <param name='gatewayName'>
        /// Required. The name of the gateway.
        /// </param>
        /// <returns>
        /// The response body contains details of the application gateway.
        /// </returns>
        public static Task<ApplicationGatewayGetResponse> GetAsync(this IL7GatewayOperations operations, string gatewayName)
        {
            return operations.GetAsync(gatewayName, CancellationToken.None);
        }
        
        /// <summary>
        /// The Get Application Gateway Configuration operation retrieves the
        /// configuration of the gateway.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157196.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.ApplicationGateway.IL7GatewayOperations.
        /// </param>
        /// <param name='gatewayName'>
        /// Required. The id  of the gateway.
        /// </param>
        /// <returns>
        /// The response to a GetApplicationGatewayConfiguation  request.
        /// </returns>
        public static ApplicationGatewayConfiguration GetConfig(this IL7GatewayOperations operations, string gatewayName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IL7GatewayOperations)s).GetConfigAsync(gatewayName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Get Application Gateway Configuration operation retrieves the
        /// configuration of the gateway.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157196.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.ApplicationGateway.IL7GatewayOperations.
        /// </param>
        /// <param name='gatewayName'>
        /// Required. The id  of the gateway.
        /// </param>
        /// <returns>
        /// The response to a GetApplicationGatewayConfiguation  request.
        /// </returns>
        public static Task<ApplicationGatewayConfiguration> GetConfigAsync(this IL7GatewayOperations operations, string gatewayName)
        {
            return operations.GetConfigAsync(gatewayName, CancellationToken.None);
        }
        
        /// <summary>
        /// The List Application Gateway operation retrieves all application
        /// gateays for the given subscription.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157196.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.ApplicationGateway.IL7GatewayOperations.
        /// </param>
        /// <returns>
        /// The response to a ListApplicationGateways request.
        /// </returns>
        public static ApplicationGatewayListResponse List(this IL7GatewayOperations operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IL7GatewayOperations)s).ListAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The List Application Gateway operation retrieves all application
        /// gateays for the given subscription.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157196.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.ApplicationGateway.IL7GatewayOperations.
        /// </param>
        /// <returns>
        /// The response to a ListApplicationGateways request.
        /// </returns>
        public static Task<ApplicationGatewayListResponse> ListAsync(this IL7GatewayOperations operations)
        {
            return operations.ListAsync(CancellationToken.None);
        }
        
        /// <summary>
        /// The Begin Set Application Gateway Config operation  sets the
        /// specified config on the application gateway  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.ApplicationGateway.IL7GatewayOperations.
        /// </param>
        /// <param name='gatewayName'>
        /// Required. Gateway name
        /// </param>
        /// <param name='config'>
        /// Required. Parameters supplied to Set Application Gateway config
        /// request.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static ApplicationGatewayOperationResponse SetConfig(this IL7GatewayOperations operations, string gatewayName, ApplicationGatewaySetConfiguration config)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IL7GatewayOperations)s).SetConfigAsync(gatewayName, config);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Begin Set Application Gateway Config operation  sets the
        /// specified config on the application gateway  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.ApplicationGateway.IL7GatewayOperations.
        /// </param>
        /// <param name='gatewayName'>
        /// Required. Gateway name
        /// </param>
        /// <param name='config'>
        /// Required. Parameters supplied to Set Application Gateway config
        /// request.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<ApplicationGatewayOperationResponse> SetConfigAsync(this IL7GatewayOperations operations, string gatewayName, ApplicationGatewaySetConfiguration config)
        {
            return operations.SetConfigAsync(gatewayName, config, CancellationToken.None);
        }
    }
}
