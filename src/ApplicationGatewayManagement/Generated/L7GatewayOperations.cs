// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Linq;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.Common;
using Microsoft.WindowsAzure.Common.Internals;
using Microsoft.WindowsAzure.Management.ApplicationGateway;
using Microsoft.WindowsAzure.Management.ApplicationGateway.Models;

namespace Microsoft.WindowsAzure.Management.ApplicationGateway
{
    /// <summary>
    /// The Application Gateway Management API includes operations for managing
    /// application gateways in your subscription.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154113.aspx for
    /// more information)
    /// </summary>
    internal partial class L7GatewayOperations : IServiceOperations<ApplicationGatewayManagementClient>, Microsoft.WindowsAzure.Management.ApplicationGateway.IL7GatewayOperations
    {
        /// <summary>
        /// Initializes a new instance of the L7GatewayOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal L7GatewayOperations(ApplicationGatewayManagementClient client)
        {
            this._client = client;
        }
        
        private ApplicationGatewayManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.ApplicationGateway.ApplicationGatewayManagementClient.
        /// </summary>
        public ApplicationGatewayManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// The Begin Create Application Gateway operation  creates Application
        /// Gateway with the specified  parameters.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Begin CreateApplication
        /// Gateway request.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async System.Threading.Tasks.Task<Microsoft.WindowsAzure.Management.ApplicationGateway.Models.GatewayOperationResponse> BeginCreateApplicationGatewayAsync(CreateApplicationGatewayParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "BeginCreateApplicationGatewayAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/services/networking/ApplicationGateways?api-version=1.0";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2014-05-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement createApplicationGatewayParametersElement = new XElement(XName.Get("CreateApplicationGatewayParameters", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(createApplicationGatewayParametersElement);
                
                if (parameters.Description != null)
                {
                    XElement descriptionElement = new XElement(XName.Get("Description", "http://schemas.microsoft.com/windowsazure"));
                    descriptionElement.Value = parameters.Description;
                    createApplicationGatewayParametersElement.Add(descriptionElement);
                }
                
                if (parameters.GatewaySize != null)
                {
                    XElement gatewaySizeElement = new XElement(XName.Get("GatewaySize", "http://schemas.microsoft.com/windowsazure"));
                    gatewaySizeElement.Value = parameters.GatewaySize;
                    createApplicationGatewayParametersElement.Add(gatewaySizeElement);
                }
                
                XElement instanceCountElement = new XElement(XName.Get("InstanceCount", "http://schemas.microsoft.com/windowsazure"));
                instanceCountElement.Value = parameters.InstanceCount.ToString();
                createApplicationGatewayParametersElement.Add(instanceCountElement);
                
                if (parameters.Name != null)
                {
                    XElement nameElement = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                    nameElement.Value = parameters.Name;
                    createApplicationGatewayParametersElement.Add(nameElement);
                }
                
                if (parameters.Subnets != null)
                {
                    XElement subnetsElement = new XElement(XName.Get("Subnets", "http://schemas.microsoft.com/windowsazure"));
                    createApplicationGatewayParametersElement.Add(subnetsElement);
                    
                    if (parameters.Subnets.Subnets != null)
                    {
                        XElement subnetsSequenceElement = new XElement(XName.Get("Subnets", "http://schemas.microsoft.com/windowsazure"));
                        foreach (string subnetsItem in parameters.Subnets.Subnets)
                        {
                            XElement subnetsItemElement = new XElement(XName.Get("string", "http://schemas.microsoft.com/windowsazure"));
                            subnetsItemElement.Value = subnetsItem;
                            subnetsSequenceElement.Add(subnetsItemElement);
                        }
                        subnetsElement.Add(subnetsSequenceElement);
                    }
                }
                
                if (parameters.VnetName != null)
                {
                    XElement vnetNameElement = new XElement(XName.Get("VnetName", "http://schemas.microsoft.com/windowsazure"));
                    vnetNameElement.Value = parameters.VnetName;
                    createApplicationGatewayParametersElement.Add(vnetNameElement);
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GatewayOperationResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new GatewayOperationResponse();
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement gatewayOperationAsyncResponseElement = responseDoc.Element(XName.Get("GatewayOperationAsyncResponse", "http://schemas.microsoft.com/windowsazure"));
                    if (gatewayOperationAsyncResponseElement != null)
                    {
                        XElement idElement = gatewayOperationAsyncResponseElement.Element(XName.Get("ID", "http://schemas.microsoft.com/windowsazure"));
                        if (idElement != null)
                        {
                            string idInstance = idElement.Value;
                            result.OperationId = idInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Begin Delete Application Gateway operation  deletes Application
        /// Gateway with the specified  parameters.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='gatewayName'>
        /// Required. The name of the gateway.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async System.Threading.Tasks.Task<Microsoft.WindowsAzure.Management.ApplicationGateway.Models.GatewayOperationResponse> BeginDeleteApplicationGatewayAsync(string gatewayName, CancellationToken cancellationToken)
        {
            // Validate
            if (gatewayName == null)
            {
                throw new ArgumentNullException("gatewayName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("gatewayName", gatewayName);
                Tracing.Enter(invocationId, this, "BeginDeleteApplicationGatewayAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/services/networking/ApplicationGateways/" + gatewayName.Trim() + "?api-version=1.0";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2014-05-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GatewayOperationResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new GatewayOperationResponse();
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement gatewayOperationAsyncResponseElement = responseDoc.Element(XName.Get("GatewayOperationAsyncResponse", "http://schemas.microsoft.com/windowsazure"));
                    if (gatewayOperationAsyncResponseElement != null)
                    {
                        XElement idElement = gatewayOperationAsyncResponseElement.Element(XName.Get("ID", "http://schemas.microsoft.com/windowsazure"));
                        if (idElement != null)
                        {
                            string idInstance = idElement.Value;
                            result.OperationId = idInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Execute Application Gateway Operation executes specified
        /// operation on Application Gateway .  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='gatewayName'>
        /// Required. Name of the gateway
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Begin Execute Operation
        /// request.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async System.Threading.Tasks.Task<Microsoft.WindowsAzure.Management.ApplicationGateway.Models.GatewayOperationResponse> BeginExecuteOperationAsync(string gatewayName, ApplicationGatewayOperation parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (gatewayName == null)
            {
                throw new ArgumentNullException("gatewayName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("gatewayName", gatewayName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "BeginExecuteOperationAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/services/networking/ApplicationGateways/" + gatewayName.Trim() + "/Operations?api-version=1.0";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2014-05-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement applicationGatewayOperationElement = new XElement(XName.Get("ApplicationGatewayOperation", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(applicationGatewayOperationElement);
                
                if (parameters.OperationType != null)
                {
                    XElement operationTypeElement = new XElement(XName.Get("OperationType", "http://schemas.microsoft.com/windowsazure"));
                    operationTypeElement.Value = parameters.OperationType;
                    applicationGatewayOperationElement.Add(operationTypeElement);
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GatewayOperationResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new GatewayOperationResponse();
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement gatewayOperationAsyncResponseElement = responseDoc.Element(XName.Get("GatewayOperationAsyncResponse", "http://schemas.microsoft.com/windowsazure"));
                    if (gatewayOperationAsyncResponseElement != null)
                    {
                        XElement idElement = gatewayOperationAsyncResponseElement.Element(XName.Get("ID", "http://schemas.microsoft.com/windowsazure"));
                        if (idElement != null)
                        {
                            string idInstance = idElement.Value;
                            result.OperationId = idInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Begin Set Application Gateway config operation  sets the
        /// specified config on the application gateway  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='gatewayName'>
        /// Required. Gateway name
        /// </param>
        /// <param name='config'>
        /// Required. The application gateway configuration
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async System.Threading.Tasks.Task<Microsoft.WindowsAzure.Management.ApplicationGateway.Models.GatewayOperationResponse> BeginSetConfigAsync(string gatewayName, ApplicationGatewaySetConfiguration config, CancellationToken cancellationToken)
        {
            // Validate
            if (gatewayName == null)
            {
                throw new ArgumentNullException("gatewayName");
            }
            if (config == null)
            {
                throw new ArgumentNullException("config");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("gatewayName", gatewayName);
                tracingParameters.Add("config", config);
                Tracing.Enter(invocationId, this, "BeginSetConfigAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/services/networking/ApplicationGateways/" + gatewayName.Trim() + "/configuration?api-version=1.0";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2014-05-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement applicationGatewayConfigurationElement = new XElement(XName.Get("ApplicationGatewayConfiguration", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(applicationGatewayConfigurationElement);
                
                if (config.Name != null)
                {
                    XElement nameElement = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                    nameElement.Value = config.Name;
                    applicationGatewayConfigurationElement.Add(nameElement);
                }
                
                if (config.FrontendPorts != null)
                {
                    XElement frontendPortsSequenceElement = new XElement(XName.Get("FrontendPorts", "http://schemas.microsoft.com/windowsazure"));
                    foreach (FrontendPort frontendPortsItem in config.FrontendPorts)
                    {
                        XElement frontendPortElement = new XElement(XName.Get("FrontendPort", "http://schemas.microsoft.com/windowsazure"));
                        frontendPortsSequenceElement.Add(frontendPortElement);
                        
                        if (frontendPortsItem.Name != null)
                        {
                            XElement nameElement2 = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                            nameElement2.Value = frontendPortsItem.Name;
                            frontendPortElement.Add(nameElement2);
                        }
                        
                        XElement portElement = new XElement(XName.Get("Port", "http://schemas.microsoft.com/windowsazure"));
                        portElement.Value = frontendPortsItem.Port.ToString();
                        frontendPortElement.Add(portElement);
                    }
                    applicationGatewayConfigurationElement.Add(frontendPortsSequenceElement);
                }
                
                if (config.BackendAddressPools != null)
                {
                    XElement backendAddressPoolsSequenceElement = new XElement(XName.Get("BackendAddressPools", "http://schemas.microsoft.com/windowsazure"));
                    foreach (BackendAddressPool backendAddressPoolsItem in config.BackendAddressPools)
                    {
                        XElement backendAddressPoolElement = new XElement(XName.Get("BackendAddressPool", "http://schemas.microsoft.com/windowsazure"));
                        backendAddressPoolsSequenceElement.Add(backendAddressPoolElement);
                        
                        if (backendAddressPoolsItem.Name != null)
                        {
                            XElement nameElement3 = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                            nameElement3.Value = backendAddressPoolsItem.Name;
                            backendAddressPoolElement.Add(nameElement3);
                        }
                        
                        if (backendAddressPoolsItem.BackendServers != null)
                        {
                            XElement iPAddressesSequenceElement = new XElement(XName.Get("IPAddresses", "http://schemas.microsoft.com/windowsazure"));
                            foreach (BackendServer iPAddressesItem in backendAddressPoolsItem.BackendServers)
                            {
                                XElement iPAddressElement = new XElement(XName.Get("IPAddress", "http://schemas.microsoft.com/windowsazure"));
                                iPAddressesSequenceElement.Add(iPAddressElement);
                                
                                if (iPAddressesItem.IPAddress != null)
                                {
                                    iPAddressElement.Value = iPAddressesItem.IPAddress;
                                }
                            }
                            backendAddressPoolElement.Add(iPAddressesSequenceElement);
                        }
                    }
                    applicationGatewayConfigurationElement.Add(backendAddressPoolsSequenceElement);
                }
                
                if (config.BackendHttpSettingsList != null)
                {
                    XElement backendHttpSettingsListSequenceElement = new XElement(XName.Get("BackendHttpSettingsList", "http://schemas.microsoft.com/windowsazure"));
                    foreach (BackendHttpSettings backendHttpSettingsListItem in config.BackendHttpSettingsList)
                    {
                        XElement backendHttpSettingsElement = new XElement(XName.Get("BackendHttpSettings", "http://schemas.microsoft.com/windowsazure"));
                        backendHttpSettingsListSequenceElement.Add(backendHttpSettingsElement);
                        
                        if (backendHttpSettingsListItem.Name != null)
                        {
                            XElement nameElement4 = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                            nameElement4.Value = backendHttpSettingsListItem.Name;
                            backendHttpSettingsElement.Add(nameElement4);
                        }
                        
                        if (backendHttpSettingsListItem.BackendAddressPool != null)
                        {
                            XElement backendAddressPoolElement2 = new XElement(XName.Get("BackendAddressPool", "http://schemas.microsoft.com/windowsazure"));
                            backendAddressPoolElement2.Value = backendHttpSettingsListItem.BackendAddressPool;
                            backendHttpSettingsElement.Add(backendAddressPoolElement2);
                        }
                        
                        XElement portElement2 = new XElement(XName.Get("Port", "http://schemas.microsoft.com/windowsazure"));
                        portElement2.Value = backendHttpSettingsListItem.Port.ToString();
                        backendHttpSettingsElement.Add(portElement2);
                        
                        XElement protocolElement = new XElement(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                        protocolElement.Value = backendHttpSettingsListItem.Protocol.ToString();
                        backendHttpSettingsElement.Add(protocolElement);
                        
                        if (backendHttpSettingsListItem.CookieBasedAffinity != null)
                        {
                            XElement cookieBasedAffinityElement = new XElement(XName.Get("CookieBasedAffinity", "http://schemas.microsoft.com/windowsazure"));
                            cookieBasedAffinityElement.Value = backendHttpSettingsListItem.CookieBasedAffinity;
                            backendHttpSettingsElement.Add(cookieBasedAffinityElement);
                        }
                    }
                    applicationGatewayConfigurationElement.Add(backendHttpSettingsListSequenceElement);
                }
                
                if (config.HttpListeners != null)
                {
                    XElement httpListenersSequenceElement = new XElement(XName.Get("HttpListeners", "http://schemas.microsoft.com/windowsazure"));
                    foreach (AGHttpListener httpListenersItem in config.HttpListeners)
                    {
                        XElement httpListenerElement = new XElement(XName.Get("HttpListener", "http://schemas.microsoft.com/windowsazure"));
                        httpListenersSequenceElement.Add(httpListenerElement);
                        
                        if (httpListenersItem.Name != null)
                        {
                            XElement nameElement5 = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                            nameElement5.Value = httpListenersItem.Name;
                            httpListenerElement.Add(nameElement5);
                        }
                        
                        if (httpListenersItem.FrontendPort != null)
                        {
                            XElement frontendPortElement2 = new XElement(XName.Get("FrontendPort", "http://schemas.microsoft.com/windowsazure"));
                            frontendPortElement2.Value = httpListenersItem.FrontendPort;
                            httpListenerElement.Add(frontendPortElement2);
                        }
                        
                        XElement protocolElement2 = new XElement(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                        protocolElement2.Value = httpListenersItem.Protocol.ToString();
                        httpListenerElement.Add(protocolElement2);
                        
                        if (httpListenersItem.SslCert != null)
                        {
                            XElement sslCertElement = new XElement(XName.Get("SslCert", "http://schemas.microsoft.com/windowsazure"));
                            sslCertElement.Value = httpListenersItem.SslCert;
                            httpListenerElement.Add(sslCertElement);
                        }
                    }
                    applicationGatewayConfigurationElement.Add(httpListenersSequenceElement);
                }
                
                if (config.HttpLoadBalancingRules != null)
                {
                    XElement httpLoadBalancingRulesSequenceElement = new XElement(XName.Get("HttpLoadBalancingRules", "http://schemas.microsoft.com/windowsazure"));
                    foreach (HttpLoadBalancingRule httpLoadBalancingRulesItem in config.HttpLoadBalancingRules)
                    {
                        XElement httpLoadBalancingRuleElement = new XElement(XName.Get("HttpLoadBalancingRule", "http://schemas.microsoft.com/windowsazure"));
                        httpLoadBalancingRulesSequenceElement.Add(httpLoadBalancingRuleElement);
                        
                        if (httpLoadBalancingRulesItem.Name != null)
                        {
                            XElement nameElement6 = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                            nameElement6.Value = httpLoadBalancingRulesItem.Name;
                            httpLoadBalancingRuleElement.Add(nameElement6);
                        }
                        
                        if (httpLoadBalancingRulesItem.Type != null)
                        {
                            XElement typeElement = new XElement(XName.Get("Type", "http://schemas.microsoft.com/windowsazure"));
                            typeElement.Value = httpLoadBalancingRulesItem.Type;
                            httpLoadBalancingRuleElement.Add(typeElement);
                        }
                        
                        if (httpLoadBalancingRulesItem.BackendHttpSettings != null)
                        {
                            XElement backendHttpSettingsElement2 = new XElement(XName.Get("BackendHttpSettings", "http://schemas.microsoft.com/windowsazure"));
                            backendHttpSettingsElement2.Value = httpLoadBalancingRulesItem.BackendHttpSettings;
                            httpLoadBalancingRuleElement.Add(backendHttpSettingsElement2);
                        }
                        
                        if (httpLoadBalancingRulesItem.Listener != null)
                        {
                            XElement listenerElement = new XElement(XName.Get("Listener", "http://schemas.microsoft.com/windowsazure"));
                            listenerElement.Value = httpLoadBalancingRulesItem.Listener;
                            httpLoadBalancingRuleElement.Add(listenerElement);
                        }
                        
                        if (httpLoadBalancingRulesItem.BackendServerPool != null)
                        {
                            XElement backendServerPoolElement = new XElement(XName.Get("BackendServerPool", "http://schemas.microsoft.com/windowsazure"));
                            backendServerPoolElement.Value = httpLoadBalancingRulesItem.BackendServerPool;
                            httpLoadBalancingRuleElement.Add(backendServerPoolElement);
                        }
                    }
                    applicationGatewayConfigurationElement.Add(httpLoadBalancingRulesSequenceElement);
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GatewayOperationResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new GatewayOperationResponse();
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement gatewayOperationAsyncResponseElement = responseDoc.Element(XName.Get("GatewayOperationAsyncResponse", "http://schemas.microsoft.com/windowsazure"));
                    if (gatewayOperationAsyncResponseElement != null)
                    {
                        XElement idElement = gatewayOperationAsyncResponseElement.Element(XName.Get("ID", "http://schemas.microsoft.com/windowsazure"));
                        if (idElement != null)
                        {
                            string idInstance = idElement.Value;
                            result.OperationId = idInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Begin Create Application Gateway operation  creates Application
        /// Gateway with the specified  parameters.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='parameters'>
        /// Required. Parameters supplied to CreateApplication Gateway request.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public async System.Threading.Tasks.Task<Microsoft.WindowsAzure.Management.ApplicationGateway.Models.ApplicationGatewayOperationResponse> CreateAsync(CreateApplicationGatewayParameters parameters, CancellationToken cancellationToken)
        {
            ApplicationGatewayManagementClient client = this.Client;
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "CreateAsync", tracingParameters);
            }
            try
            {
                if (shouldTrace)
                {
                    client = this.Client.WithHandler(new ClientRequestTrackingHandler(invocationId));
                }
                
                cancellationToken.ThrowIfCancellationRequested();
                GatewayOperationResponse response = await client.ApplicationGateways.BeginCreateApplicationGatewayAsync(parameters, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                ApplicationGatewayOperationResponse result = await client.GetOperationStatusAsync(response.OperationId, cancellationToken).ConfigureAwait(false);
                int delayInSeconds = 30;
                if (client.LongRunningOperationInitialTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationInitialTimeout;
                }
                while ((result.Status != AsyncOperationStatus.InProgress) == false)
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                    cancellationToken.ThrowIfCancellationRequested();
                    result = await client.GetOperationStatusAsync(response.OperationId, cancellationToken).ConfigureAwait(false);
                    delayInSeconds = 30;
                    if (client.LongRunningOperationRetryTimeout >= 0)
                    {
                        delayInSeconds = client.LongRunningOperationRetryTimeout;
                    }
                }
                
                if (shouldTrace)
                {
                    Tracing.Exit(invocationId, result);
                }
                
                if (result.Status != AsyncOperationStatus.Successful)
                {
                    if (result.Error != null)
                    {
                        CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                        ex.ErrorCode = result.Error.Code;
                        ex.ErrorMessage = result.Error.Message;
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    else
                    {
                        CloudException ex = new CloudException("");
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                }
                
                return result;
            }
            finally
            {
                if (client != null && shouldTrace)
                {
                    client.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Delete Application Gateway operation  deletes Application
        /// Gateway with the specified  parameters.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='gatewayName'>
        /// Required. The name of the gateway.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public async System.Threading.Tasks.Task<Microsoft.WindowsAzure.Management.ApplicationGateway.Models.ApplicationGatewayOperationResponse> DeleteAsync(string gatewayName, CancellationToken cancellationToken)
        {
            ApplicationGatewayManagementClient client = this.Client;
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("gatewayName", gatewayName);
                Tracing.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            try
            {
                if (shouldTrace)
                {
                    client = this.Client.WithHandler(new ClientRequestTrackingHandler(invocationId));
                }
                
                cancellationToken.ThrowIfCancellationRequested();
                GatewayOperationResponse response = await client.ApplicationGateways.BeginDeleteApplicationGatewayAsync(gatewayName, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                ApplicationGatewayOperationResponse result = await client.GetOperationStatusAsync(response.OperationId, cancellationToken).ConfigureAwait(false);
                int delayInSeconds = 30;
                if (client.LongRunningOperationInitialTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationInitialTimeout;
                }
                while ((result.Status != AsyncOperationStatus.InProgress) == false)
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                    cancellationToken.ThrowIfCancellationRequested();
                    result = await client.GetOperationStatusAsync(response.OperationId, cancellationToken).ConfigureAwait(false);
                    delayInSeconds = 30;
                    if (client.LongRunningOperationRetryTimeout >= 0)
                    {
                        delayInSeconds = client.LongRunningOperationRetryTimeout;
                    }
                }
                
                if (shouldTrace)
                {
                    Tracing.Exit(invocationId, result);
                }
                
                if (result.Status != AsyncOperationStatus.Successful)
                {
                    if (result.Error != null)
                    {
                        CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                        ex.ErrorCode = result.Error.Code;
                        ex.ErrorMessage = result.Error.Message;
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    else
                    {
                        CloudException ex = new CloudException("");
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                }
                
                return result;
            }
            finally
            {
                if (client != null && shouldTrace)
                {
                    client.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Execute Application Gateway Operation executes specofoed
        /// operation in the Application Gateway.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='gatewayName'>
        /// Required. Name of the gateway
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to Execute Operation request.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public async System.Threading.Tasks.Task<Microsoft.WindowsAzure.Management.ApplicationGateway.Models.ApplicationGatewayOperationResponse> ExecuteOperationAsync(string gatewayName, ApplicationGatewayOperation parameters, CancellationToken cancellationToken)
        {
            ApplicationGatewayManagementClient client = this.Client;
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("gatewayName", gatewayName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "ExecuteOperationAsync", tracingParameters);
            }
            try
            {
                if (shouldTrace)
                {
                    client = this.Client.WithHandler(new ClientRequestTrackingHandler(invocationId));
                }
                
                cancellationToken.ThrowIfCancellationRequested();
                GatewayOperationResponse response = await client.ApplicationGateways.BeginExecuteOperationAsync(gatewayName, parameters, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                ApplicationGatewayOperationResponse result = await client.GetOperationStatusAsync(response.OperationId, cancellationToken).ConfigureAwait(false);
                int delayInSeconds = 30;
                if (client.LongRunningOperationInitialTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationInitialTimeout;
                }
                while ((result.Status != AsyncOperationStatus.InProgress) == false)
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                    cancellationToken.ThrowIfCancellationRequested();
                    result = await client.GetOperationStatusAsync(response.OperationId, cancellationToken).ConfigureAwait(false);
                    delayInSeconds = 30;
                    if (client.LongRunningOperationRetryTimeout >= 0)
                    {
                        delayInSeconds = client.LongRunningOperationRetryTimeout;
                    }
                }
                
                if (shouldTrace)
                {
                    Tracing.Exit(invocationId, result);
                }
                
                if (result.Status != AsyncOperationStatus.Successful)
                {
                    if (result.Error != null)
                    {
                        CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                        ex.ErrorCode = result.Error.Code;
                        ex.ErrorMessage = result.Error.Message;
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    else
                    {
                        CloudException ex = new CloudException("");
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                }
                
                return result;
            }
            finally
            {
                if (client != null && shouldTrace)
                {
                    client.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The List Application Gateway operation retrieves the application
        /// gateways provisioned for the given subscription.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157196.aspx
        /// for more information)
        /// </summary>
        /// <param name='gatewayName'>
        /// Required. The name of the gateway.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains details of the application gateway.
        /// </returns>
        public async System.Threading.Tasks.Task<Microsoft.WindowsAzure.Management.ApplicationGateway.Models.ApplicationGatewayGetResponse> GetAsync(string gatewayName, CancellationToken cancellationToken)
        {
            // Validate
            if (gatewayName == null)
            {
                throw new ArgumentNullException("gatewayName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("gatewayName", gatewayName);
                Tracing.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/services/networking/ApplicationGateways/" + gatewayName.Trim() + "?api-version=1.0";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2014-05-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ApplicationGatewayGetResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new ApplicationGatewayGetResponse();
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement applicationGatewayElement = responseDoc.Element(XName.Get("ApplicationGateway", "http://schemas.microsoft.com/windowsazure"));
                    if (applicationGatewayElement != null)
                    {
                        XElement descriptionElement = applicationGatewayElement.Element(XName.Get("Description", "http://schemas.microsoft.com/windowsazure"));
                        if (descriptionElement != null)
                        {
                            string descriptionInstance = descriptionElement.Value;
                            result.Description = descriptionInstance;
                        }
                        
                        XElement dnsNameElement = applicationGatewayElement.Element(XName.Get("DnsName", "http://schemas.microsoft.com/windowsazure"));
                        if (dnsNameElement != null)
                        {
                            string dnsNameInstance = dnsNameElement.Value;
                            result.DnsName = dnsNameInstance;
                        }
                        
                        XElement gatewaySizeElement = applicationGatewayElement.Element(XName.Get("GatewaySize", "http://schemas.microsoft.com/windowsazure"));
                        if (gatewaySizeElement != null)
                        {
                            string gatewaySizeInstance = gatewaySizeElement.Value;
                            result.GatewaySize = gatewaySizeInstance;
                        }
                        
                        XElement instanceCountElement = applicationGatewayElement.Element(XName.Get("InstanceCount", "http://schemas.microsoft.com/windowsazure"));
                        if (instanceCountElement != null)
                        {
                            uint instanceCountInstance = uint.Parse(instanceCountElement.Value, CultureInfo.InvariantCulture);
                            result.InstanceCount = instanceCountInstance;
                        }
                        
                        XElement nameElement = applicationGatewayElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                        if (nameElement != null)
                        {
                            string nameInstance = nameElement.Value;
                            result.Name = nameInstance;
                        }
                        
                        XElement stateElement = applicationGatewayElement.Element(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                        if (stateElement != null)
                        {
                            string stateInstance = stateElement.Value;
                            result.State = stateInstance;
                        }
                        
                        XElement subnetsElement = applicationGatewayElement.Element(XName.Get("Subnets", "http://schemas.microsoft.com/windowsazure"));
                        if (subnetsElement != null)
                        {
                            SubnetCollection subnetsInstance = new SubnetCollection();
                            result.Subnets = subnetsInstance;
                            
                            XElement subnetsSequenceElement = subnetsElement.Element(XName.Get("Subnets", "http://schemas.microsoft.com/windowsazure"));
                            if (subnetsSequenceElement != null)
                            {
                                foreach (XElement subnetsElement2 in subnetsSequenceElement.Elements(XName.Get("string", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    subnetsInstance.Subnets.Add(subnetsElement2.Value);
                                }
                            }
                        }
                        
                        XElement vnetNameElement = applicationGatewayElement.Element(XName.Get("VnetName", "http://schemas.microsoft.com/windowsazure"));
                        if (vnetNameElement != null)
                        {
                            string vnetNameInstance = vnetNameElement.Value;
                            result.VnetName = vnetNameInstance;
                        }
                        
                        XElement vipElement = applicationGatewayElement.Element(XName.Get("Vip", "http://schemas.microsoft.com/windowsazure"));
                        if (vipElement != null)
                        {
                            string vipInstance = vipElement.Value;
                            result.Vip = vipInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Application Gateway Configuration operation retrieves the
        /// configuration of the gateway.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157196.aspx
        /// for more information)
        /// </summary>
        /// <param name='gatewayName'>
        /// Required. The id  of the gateway.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response to a GetApplicationGatewayConfiguation  request.
        /// </returns>
        public async System.Threading.Tasks.Task<Microsoft.WindowsAzure.Management.ApplicationGateway.Models.ApplicationGatewayConfiguration> GetConfigAsync(string gatewayName, CancellationToken cancellationToken)
        {
            // Validate
            if (gatewayName == null)
            {
                throw new ArgumentNullException("gatewayName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("gatewayName", gatewayName);
                Tracing.Enter(invocationId, this, "GetConfigAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/services/networking/ApplicationGateways/" + gatewayName.Trim() + "/configuration?api-version=1.0";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2014-05-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ApplicationGatewayConfiguration result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new ApplicationGatewayConfiguration();
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement applicationGatewayConfigurationElement = responseDoc.Element(XName.Get("ApplicationGatewayConfiguration", "http://schemas.microsoft.com/windowsazure"));
                    if (applicationGatewayConfigurationElement != null)
                    {
                        XElement nameElement = applicationGatewayConfigurationElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                        if (nameElement != null)
                        {
                            string nameInstance = nameElement.Value;
                            result.Name = nameInstance;
                        }
                        
                        XElement frontendPortsSequenceElement = applicationGatewayConfigurationElement.Element(XName.Get("FrontendPorts", "http://schemas.microsoft.com/windowsazure"));
                        if (frontendPortsSequenceElement != null)
                        {
                            foreach (XElement frontendPortsElement in frontendPortsSequenceElement.Elements(XName.Get("FrontendPort", "http://schemas.microsoft.com/windowsazure")))
                            {
                                FrontendPort frontendPortInstance = new FrontendPort();
                                result.FrontendPorts.Add(frontendPortInstance);
                                
                                XElement nameElement2 = frontendPortsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                if (nameElement2 != null)
                                {
                                    string nameInstance2 = nameElement2.Value;
                                    frontendPortInstance.Name = nameInstance2;
                                }
                                
                                XElement portElement = frontendPortsElement.Element(XName.Get("Port", "http://schemas.microsoft.com/windowsazure"));
                                if (portElement != null)
                                {
                                    ushort portInstance = ushort.Parse(portElement.Value, CultureInfo.InvariantCulture);
                                    frontendPortInstance.Port = portInstance;
                                }
                            }
                        }
                        
                        XElement backendAddressPoolsSequenceElement = applicationGatewayConfigurationElement.Element(XName.Get("BackendAddressPools", "http://schemas.microsoft.com/windowsazure"));
                        if (backendAddressPoolsSequenceElement != null)
                        {
                            foreach (XElement backendAddressPoolsElement in backendAddressPoolsSequenceElement.Elements(XName.Get("BackendAddressPool", "http://schemas.microsoft.com/windowsazure")))
                            {
                                BackendAddressPool backendAddressPoolInstance = new BackendAddressPool();
                                result.BackendAddressPools.Add(backendAddressPoolInstance);
                                
                                XElement nameElement3 = backendAddressPoolsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                if (nameElement3 != null)
                                {
                                    string nameInstance3 = nameElement3.Value;
                                    backendAddressPoolInstance.Name = nameInstance3;
                                }
                                
                                XElement iPAddressesSequenceElement = backendAddressPoolsElement.Element(XName.Get("IPAddresses", "http://schemas.microsoft.com/windowsazure"));
                                if (iPAddressesSequenceElement != null)
                                {
                                    foreach (XElement iPAddressesElement in iPAddressesSequenceElement.Elements(XName.Get("IPAddress", "http://schemas.microsoft.com/windowsazure")))
                                    {
                                        BackendServer iPAddressInstance = new BackendServer();
                                        backendAddressPoolInstance.BackendServers.Add(iPAddressInstance);
                                        
                                        string iPAddressInstance2 = iPAddressesElement.Value;
                                        iPAddressInstance.IPAddress = iPAddressInstance2;
                                    }
                                }
                            }
                        }
                        
                        XElement backendHttpSettingsListSequenceElement = applicationGatewayConfigurationElement.Element(XName.Get("BackendHttpSettingsList", "http://schemas.microsoft.com/windowsazure"));
                        if (backendHttpSettingsListSequenceElement != null)
                        {
                            foreach (XElement backendHttpSettingsListElement in backendHttpSettingsListSequenceElement.Elements(XName.Get("BackendHttpSettings", "http://schemas.microsoft.com/windowsazure")))
                            {
                                BackendHttpSettings backendHttpSettingsInstance = new BackendHttpSettings();
                                result.BackendHttpSettingsList.Add(backendHttpSettingsInstance);
                                
                                XElement nameElement4 = backendHttpSettingsListElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                if (nameElement4 != null)
                                {
                                    string nameInstance4 = nameElement4.Value;
                                    backendHttpSettingsInstance.Name = nameInstance4;
                                }
                                
                                XElement backendAddressPoolElement = backendHttpSettingsListElement.Element(XName.Get("BackendAddressPool", "http://schemas.microsoft.com/windowsazure"));
                                if (backendAddressPoolElement != null)
                                {
                                    string backendAddressPoolInstance2 = backendAddressPoolElement.Value;
                                    backendHttpSettingsInstance.BackendAddressPool = backendAddressPoolInstance2;
                                }
                                
                                XElement portElement2 = backendHttpSettingsListElement.Element(XName.Get("Port", "http://schemas.microsoft.com/windowsazure"));
                                if (portElement2 != null)
                                {
                                    ushort portInstance2 = ushort.Parse(portElement2.Value, CultureInfo.InvariantCulture);
                                    backendHttpSettingsInstance.Port = portInstance2;
                                }
                                
                                XElement protocolElement = backendHttpSettingsListElement.Element(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                if (protocolElement != null)
                                {
                                    Protocol protocolInstance = ((Protocol)Enum.Parse(typeof(Protocol), protocolElement.Value, true));
                                    backendHttpSettingsInstance.Protocol = protocolInstance;
                                }
                                
                                XElement cookieBasedAffinityElement = backendHttpSettingsListElement.Element(XName.Get("CookieBasedAffinity", "http://schemas.microsoft.com/windowsazure"));
                                if (cookieBasedAffinityElement != null)
                                {
                                    string cookieBasedAffinityInstance = cookieBasedAffinityElement.Value;
                                    backendHttpSettingsInstance.CookieBasedAffinity = cookieBasedAffinityInstance;
                                }
                            }
                        }
                        
                        XElement httpListenersSequenceElement = applicationGatewayConfigurationElement.Element(XName.Get("HttpListeners", "http://schemas.microsoft.com/windowsazure"));
                        if (httpListenersSequenceElement != null)
                        {
                            foreach (XElement httpListenersElement in httpListenersSequenceElement.Elements(XName.Get("HttpListener", "http://schemas.microsoft.com/windowsazure")))
                            {
                                AGHttpListener httpListenerInstance = new AGHttpListener();
                                result.HttpListeners.Add(httpListenerInstance);
                                
                                XElement nameElement5 = httpListenersElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                if (nameElement5 != null)
                                {
                                    string nameInstance5 = nameElement5.Value;
                                    httpListenerInstance.Name = nameInstance5;
                                }
                                
                                XElement frontendPortElement = httpListenersElement.Element(XName.Get("FrontendPort", "http://schemas.microsoft.com/windowsazure"));
                                if (frontendPortElement != null)
                                {
                                    string frontendPortInstance2 = frontendPortElement.Value;
                                    httpListenerInstance.FrontendPort = frontendPortInstance2;
                                }
                                
                                XElement protocolElement2 = httpListenersElement.Element(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                if (protocolElement2 != null)
                                {
                                    Protocol protocolInstance2 = ((Protocol)Enum.Parse(typeof(Protocol), protocolElement2.Value, true));
                                    httpListenerInstance.Protocol = protocolInstance2;
                                }
                                
                                XElement sslCertElement = httpListenersElement.Element(XName.Get("SslCert", "http://schemas.microsoft.com/windowsazure"));
                                if (sslCertElement != null)
                                {
                                    string sslCertInstance = sslCertElement.Value;
                                    httpListenerInstance.SslCert = sslCertInstance;
                                }
                            }
                        }
                        
                        XElement httpLoadBalancingRulesSequenceElement = applicationGatewayConfigurationElement.Element(XName.Get("HttpLoadBalancingRules", "http://schemas.microsoft.com/windowsazure"));
                        if (httpLoadBalancingRulesSequenceElement != null)
                        {
                            foreach (XElement httpLoadBalancingRulesElement in httpLoadBalancingRulesSequenceElement.Elements(XName.Get("HttpLoadBalancingRule", "http://schemas.microsoft.com/windowsazure")))
                            {
                                HttpLoadBalancingRule httpLoadBalancingRuleInstance = new HttpLoadBalancingRule();
                                result.HttpLoadBalancingRules.Add(httpLoadBalancingRuleInstance);
                                
                                XElement nameElement6 = httpLoadBalancingRulesElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                if (nameElement6 != null)
                                {
                                    string nameInstance6 = nameElement6.Value;
                                    httpLoadBalancingRuleInstance.Name = nameInstance6;
                                }
                                
                                XElement typeElement = httpLoadBalancingRulesElement.Element(XName.Get("Type", "http://schemas.microsoft.com/windowsazure"));
                                if (typeElement != null)
                                {
                                    string typeInstance = typeElement.Value;
                                    httpLoadBalancingRuleInstance.Type = typeInstance;
                                }
                                
                                XElement backendHttpSettingsElement = httpLoadBalancingRulesElement.Element(XName.Get("BackendHttpSettings", "http://schemas.microsoft.com/windowsazure"));
                                if (backendHttpSettingsElement != null)
                                {
                                    string backendHttpSettingsInstance2 = backendHttpSettingsElement.Value;
                                    httpLoadBalancingRuleInstance.BackendHttpSettings = backendHttpSettingsInstance2;
                                }
                                
                                XElement listenerElement = httpLoadBalancingRulesElement.Element(XName.Get("Listener", "http://schemas.microsoft.com/windowsazure"));
                                if (listenerElement != null)
                                {
                                    string listenerInstance = listenerElement.Value;
                                    httpLoadBalancingRuleInstance.Listener = listenerInstance;
                                }
                                
                                XElement backendServerPoolElement = httpLoadBalancingRulesElement.Element(XName.Get("BackendServerPool", "http://schemas.microsoft.com/windowsazure"));
                                if (backendServerPoolElement != null)
                                {
                                    string backendServerPoolInstance = backendServerPoolElement.Value;
                                    httpLoadBalancingRuleInstance.BackendServerPool = backendServerPoolInstance;
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The List Application Gateway operation retrieves all application
        /// gateays for the given subscription.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157196.aspx
        /// for more information)
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response to a ListApplicationGateways request.
        /// </returns>
        public async System.Threading.Tasks.Task<Microsoft.WindowsAzure.Management.ApplicationGateway.Models.ApplicationGatewayListResponse> ListAsync(CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                Tracing.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/services/networking/ApplicationGateways?api-version=1.0";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2014-05-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ApplicationGatewayListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new ApplicationGatewayListResponse();
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement applicationGatewaysSequenceElement = responseDoc.Element(XName.Get("ApplicationGateways", "http://schemas.microsoft.com/windowsazure"));
                    if (applicationGatewaysSequenceElement != null)
                    {
                        foreach (XElement applicationGatewaysElement in applicationGatewaysSequenceElement.Elements(XName.Get("ApplicationGateway", "http://schemas.microsoft.com/windowsazure")))
                        {
                            ApplicationGatewayGetResponse applicationGatewayInstance = new ApplicationGatewayGetResponse();
                            result.ApplicationGateways.Add(applicationGatewayInstance);
                            
                            XElement descriptionElement = applicationGatewaysElement.Element(XName.Get("Description", "http://schemas.microsoft.com/windowsazure"));
                            if (descriptionElement != null)
                            {
                                string descriptionInstance = descriptionElement.Value;
                                applicationGatewayInstance.Description = descriptionInstance;
                            }
                            
                            XElement dnsNameElement = applicationGatewaysElement.Element(XName.Get("DnsName", "http://schemas.microsoft.com/windowsazure"));
                            if (dnsNameElement != null)
                            {
                                string dnsNameInstance = dnsNameElement.Value;
                                applicationGatewayInstance.DnsName = dnsNameInstance;
                            }
                            
                            XElement gatewaySizeElement = applicationGatewaysElement.Element(XName.Get("GatewaySize", "http://schemas.microsoft.com/windowsazure"));
                            if (gatewaySizeElement != null)
                            {
                                string gatewaySizeInstance = gatewaySizeElement.Value;
                                applicationGatewayInstance.GatewaySize = gatewaySizeInstance;
                            }
                            
                            XElement instanceCountElement = applicationGatewaysElement.Element(XName.Get("InstanceCount", "http://schemas.microsoft.com/windowsazure"));
                            if (instanceCountElement != null)
                            {
                                uint instanceCountInstance = uint.Parse(instanceCountElement.Value, CultureInfo.InvariantCulture);
                                applicationGatewayInstance.InstanceCount = instanceCountInstance;
                            }
                            
                            XElement nameElement = applicationGatewaysElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                            if (nameElement != null)
                            {
                                string nameInstance = nameElement.Value;
                                applicationGatewayInstance.Name = nameInstance;
                            }
                            
                            XElement stateElement = applicationGatewaysElement.Element(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                            if (stateElement != null)
                            {
                                string stateInstance = stateElement.Value;
                                applicationGatewayInstance.State = stateInstance;
                            }
                            
                            XElement subnetsElement = applicationGatewaysElement.Element(XName.Get("Subnets", "http://schemas.microsoft.com/windowsazure"));
                            if (subnetsElement != null)
                            {
                                SubnetCollection subnetsInstance = new SubnetCollection();
                                applicationGatewayInstance.Subnets = subnetsInstance;
                                
                                XElement subnetsSequenceElement = subnetsElement.Element(XName.Get("Subnets", "http://schemas.microsoft.com/windowsazure"));
                                if (subnetsSequenceElement != null)
                                {
                                    foreach (XElement subnetsElement2 in subnetsSequenceElement.Elements(XName.Get("string", "http://schemas.microsoft.com/windowsazure")))
                                    {
                                        subnetsInstance.Subnets.Add(subnetsElement2.Value);
                                    }
                                }
                            }
                            
                            XElement vnetNameElement = applicationGatewaysElement.Element(XName.Get("VnetName", "http://schemas.microsoft.com/windowsazure"));
                            if (vnetNameElement != null)
                            {
                                string vnetNameInstance = vnetNameElement.Value;
                                applicationGatewayInstance.VnetName = vnetNameInstance;
                            }
                            
                            XElement vipElement = applicationGatewaysElement.Element(XName.Get("Vip", "http://schemas.microsoft.com/windowsazure"));
                            if (vipElement != null)
                            {
                                string vipInstance = vipElement.Value;
                                applicationGatewayInstance.Vip = vipInstance;
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Begin Set Application Gateway Config operation  sets the
        /// specified config on the application gateway  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='gatewayName'>
        /// Required. Gateway name
        /// </param>
        /// <param name='config'>
        /// Required. Parameters supplied to Set Application Gateway config
        /// request.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public async System.Threading.Tasks.Task<Microsoft.WindowsAzure.Management.ApplicationGateway.Models.ApplicationGatewayOperationResponse> SetConfigAsync(string gatewayName, ApplicationGatewaySetConfiguration config, CancellationToken cancellationToken)
        {
            ApplicationGatewayManagementClient client = this.Client;
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("gatewayName", gatewayName);
                tracingParameters.Add("config", config);
                Tracing.Enter(invocationId, this, "SetConfigAsync", tracingParameters);
            }
            try
            {
                if (shouldTrace)
                {
                    client = this.Client.WithHandler(new ClientRequestTrackingHandler(invocationId));
                }
                
                cancellationToken.ThrowIfCancellationRequested();
                GatewayOperationResponse response = await client.ApplicationGateways.BeginSetConfigAsync(gatewayName, config, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                ApplicationGatewayOperationResponse result = await client.GetOperationStatusAsync(response.OperationId, cancellationToken).ConfigureAwait(false);
                int delayInSeconds = 30;
                if (client.LongRunningOperationInitialTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationInitialTimeout;
                }
                while ((result.Status != AsyncOperationStatus.InProgress) == false)
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                    cancellationToken.ThrowIfCancellationRequested();
                    result = await client.GetOperationStatusAsync(response.OperationId, cancellationToken).ConfigureAwait(false);
                    delayInSeconds = 30;
                    if (client.LongRunningOperationRetryTimeout >= 0)
                    {
                        delayInSeconds = client.LongRunningOperationRetryTimeout;
                    }
                }
                
                if (shouldTrace)
                {
                    Tracing.Exit(invocationId, result);
                }
                
                if (result.Status != AsyncOperationStatus.Successful)
                {
                    if (result.Error != null)
                    {
                        CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                        ex.ErrorCode = result.Error.Code;
                        ex.ErrorMessage = result.Error.Message;
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    else
                    {
                        CloudException ex = new CloudException("");
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                }
                
                return result;
            }
            finally
            {
                if (client != null && shouldTrace)
                {
                    client.Dispose();
                }
            }
        }
    }
}
